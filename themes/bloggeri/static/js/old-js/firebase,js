  // cloud save

 const cloudSaveButton = document.getElementById('cloudsave');

// Add an event listener to the cloudsave button
cloudSaveButton.addEventListener('click', () => {
// Get the current user
const user = firebase.auth().currentUser;

if (user) {
  // Generate a unique file name using the user's UID
  const fileName = user.uid + '.json';

  // Convert localStorage data to JSON
  const localStorageData = JSON.stringify(localStorage);

  // Compress the localStorageData using LZString
  const compressedData = LZString.compressToEncodedURIComponent(localStorageData);

  // Create a reference to the Firebase Storage folder
  const storageRef = firebase.storage().ref();

  // Create a child reference with the file path and upload the data
  const fileRef = storageRef.child('data/' + user.uid + '/' + fileName);
  fileRef.putString(compressedData, 'raw')
    .then(() => {
      console.log('Data saved to Firebase Storage successfully.');
    })
    .catch((error) => {
      console.error('Data upload to Firebase Storage failed:', error);
    });
} else {
  console.error('User not logged in.');
}
});
  
  // cloud load 

 document.getElementById('loadcloudsave').addEventListener('click', function() {
  const user = firebase.auth().currentUser;

  if (user) {
    // Generate the file name based on the user's UID
    const fileName = user.uid + '.json';

    // Create a reference to the Firebase Storage file
    const storageRef = firebase.storage().ref();
    const fileRef = storageRef.child('data/' + user.uid + '/' + fileName);

    // Get the download URL for the file
fileRef.getDownloadURL()
  .then((downloadURL) => {
    // Use the download URL to retrieve the file data
    fetch(downloadURL)
      .then((response) => response.text())
      .then((compressedData) => {
        // Decompress the compressed data using LZString
        const localStorageData = LZString.decompressFromEncodedURIComponent(compressedData);

        // Parse the decompressed data as JSON
        const data = JSON.parse(localStorageData);
        console.log('Retrieved data:', data);

 for (let key in data) {
localStorage.setItem(key, data[key]);
}
        // Do something with the retrieved data if needed
      })
      .catch((error) => {
        console.error('Error retrieving data:', error);
      });
  })
  .catch((error) => {
    console.error('Error getting download URL:', error);
  });
  } else {
    console.error('User not logged in.');
  }
});


  // delete

const deleteAccountButton = document.getElementById('deleteAccount');

// Add an event listener to the delete account button
deleteAccountButton.addEventListener('click', () => {
  // Get the currently logged-in user
  const user = firebase.auth().currentUser;

  // Prompt the user for re-authentication (e.g., password confirmation) before deleting the account
  const password = prompt('Please enter your password to confirm account deletion:');

  // Create a credential with the user's email and password
  const credential = firebase.auth.EmailAuthProvider.credential(user.email, password);

  // Re-authenticate the user with the provided credential
  user.reauthenticateWithCredential(credential)
    .then(() => {
      // Get the user's UID
      const uid = user.uid;

      // Delete the associated Firebase Storage folder
      const storage = firebase.storage();
      const storageRef = storage.ref();
      var folderPath = 'data/' + uid + '/' + uid + '.json';

      storageRef.child(folderPath).delete()
        .then(() => {
          // Successful deletion of associated storage folder
          console.log('Associated storage folder deleted successfully:', folderPath);

          // Delete the user account
          user.delete()
            .then(() => {
              // Account deletion successful
              console.log('Account deletion successful');
              // You can redirect the user to a different page or perform additional actions here
            })
            .catch((error) => {
              // Account deletion failed
              console.error('Account deletion failed:', error);
              // Display an error message to the user or handle the error appropriately
            });
        })
        .catch((error) => {
          // Error deleting associated storage folder
          console.error('Error deleting associated storage folder:', folderPath, error);
          // Display an error message to the user or handle the error appropriately

          // Continue with account deletion even if storage deletion failed
          user.delete()
            .then(() => {
              // Account deletion successful
              console.log('Account deletion successful');
              // You can redirect the user to a different page or perform additional actions here
            })
            .catch((error) => {
              // Account deletion failed
              console.error('Account deletion failed:', error);
              // Display an error message to the user or handle the error appropriately
            });
        });
    })
    .catch((error) => {
      // Re-authentication failed
      console.error('Re-authentication failed:', error);
      // Display an error message to the user or handle the error appropriately
    });
});
